// main.cpp – starter template for ESP32‑8048S043C (4.3” 800×480 RGB) 
// GUI: LVGL • Image viewer (SD) + WLED controller
//
// ───────────────────────────────────────────────
// Dependencies (PlatformIO → Home → Libraries → +Add):
//   lvgl
//   ESP32_Display_Panel        (brings ESP_Panel_Library)
//   ArduinoJson
//   JPEGDecoder
//
// Board in platformio.ini must be:
//   board = esp32-8048S043C
// which auto‑defines all GPIO & timing macros (see boards JSON).
//
// Wi‑Fi credentials and WLED host can be overridden in platformio.ini:
//   build_flags = -D WIFI_SSID="\"MyWiFi\"" -D WIFI_PASS="\"secret\"" -D WLED_HOST="\"wled.local\""
// ───────────────────────────────────────────────

#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <SD_MMC.h>
#include <lvgl.h>
#include <ArduinoJson.h>
#include <JPEGDecoder.h>
#include <ESP_Panel_Library.h>
#include <vector>
#include "ui/ui.h"

#ifndef WIFI_SSID
#define WIFI_SSID "changeme"
#define WIFI_PASS "changeme"
#endif

#ifndef WLED_HOST
#define WLED_HOST "wled.local"
#endif

// ────────────────────────── Globals
static ESP_Panel *panel;
static lv_obj_t  *home_scr, *img_scr, *led_scr;
static lv_obj_t  *img_obj;
static std::vector<String> images;
static size_t img_index = 0;

void ui_init(); {
  ui_init();          // function generated by EEZ Studio
}

// ────────────────────────── Wi‑Fi
void wifi_connect() {
  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(200);
  }
}

// ────────────────────────── SD
void sd_init() {
  // pins TF_SPI_* and TF_CS come from the board JSON
  SD_MMC.setPins(TF_SPI_SCLK, TF_SPI_MOSI, TF_SPI_MISO);
  if (!SD_MMC.begin("/sdcard", true)) {
    Serial.println("[SD] mount failed");
  }
}

void scan_sd() {
  images.clear();
  File root = SD_MMC.open("/");
  while (true) {
    File f = root.openNextFile();
    if (!f) break;
    String n = f.name(); n.toLowerCase();
    if (n.endsWith(".jpg") || n.endsWith(".jpeg") || n.endsWith(".bmp")) {
      images.push_back(String("/") + f.name());
    }
    f.close();
  }
}

// ────────────────────────── WLED helper
void send_to_wled(const JsonDocument &doc) {
  if (WiFi.status() != WL_CONNECTED) return;
  HTTPClient http;
  http.begin(String("http://") + WLED_HOST + "/json/state");
  http.addHeader("Content-Type", "application/json");
  String payload; serializeJson(doc, payload);
  http.POST(payload);
  http.end();
}

// ────────────────────────── LVGL helpers

// ────────────────────────── Panel & LVGL init (relies on board macros) 
void panel_init() {
  panel = new ESP_Panel();          // picks up DISPLAY_* and GPIO_* macros
  panel->begin();
  panel->initLVGL();                // registers LVGL flush + touch driver
  lv_disp_set_rotation(panel->getLvglDisplay(), LV_DISP_ROT_NONE);
}

// ────────────────────────── Arduino entrypoints
void setup() {
  Serial.begin(115200);
  pinMode(GPIO_BCKL, OUTPUT); digitalWrite(GPIO_BCKL, HIGH);
  wifi_connect();
  sd_init(); scan_sd();
  panel_init(); build_ui(); show_image();
}

void loop() {
  lv_timer_handler();
  delay(5);
}
